<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta content="width=device-width,initial-scale=1,maximum-scale=1,minimum-scale=1,user-scalable=no" name="viewport">
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-status-bar-style" content="black">
<link rel="icon" href="$!jpomProxyPath/static/favicon.ico" type="image/x-icon"/>
<link rel="shortcut icon" href="$!jpomProxyPath/static/favicon.ico" type="image/x-icon"/>
<link rel="stylesheet" href="$!jpomProxyPath/static/layui/css/layui.css?v=$staticCacheTime" media="all">
<style>
    .x-red {
        color: red;
    }

    .layui-table-hover {
        -webkit-box-shadow: inset 0 0 10px #8D8D8D;
        -moz-box-shadow: inset 0 0 10px #8D8D8D;
        box-shadow: inset 0 0 10px #8D8D8D;
    }
</style>
<script type="text/javascript" src="$!jpomProxyPath/static/layui/layui.js?v=$staticCacheTime"></script>
<script type="text/javascript">
    /**
     * @param  {String} message 错误信息
     * @param  {String} source  发生错误的脚本URL
     * @param  {Number} lineno  发生错误的行号
     * @param  {Number} colno   发生错误的列号
     * @param  {Object} error   Error对象
     */
    window.onerror = function (message, source, lineno, colno, error) {
        // ...
    }
    var $, layer, form, element, table;
    const asyncFn = [];
    ## 不缓存
    layui.config({
        version: true
    });
    layui.use(['layer', 'element', 'form', 'table'], function () {
        $ = layui.$;
        // ztree 调用
        window.jQuery = $;
        element = layui.element;
        layer = layui.layer;
        form = layui.form;
        table = layui.table;
        //
        try {
            loadSuccess && loadSuccess();
        } catch (e) {
        }
        //
        layui.each(asyncFn, function () {
            this && this();
        })
    ## js Common
        var jsCommonContext = document.getElementById("jsCommonContext").innerHTML;
        if (jsCommonContext && jsCommonContext !== '') {
            jsCommonContext = decodeURIComponent(jsCommonContext);
            $("body").append(jsCommonContext);
        }
    ## 统一事件
        $("button[op='a']").click(function () {
            var href = $(this).attr("href");
            location.href = appendNodeId(href);
        });
    });

    function appendNodeId(url) {
        var nodeId = getTopQueryString("nodeId");
        return urlUpdateParams(url, "nodeId", nodeId);
    }

    function tabChange(options) {
        var element = top.layui.element;
        var lay_id = 'tab_' + options.id;
        if (options.id != "welcome") {
            lay_id += options.title;
            options.url = appendNodeId(options.url);
        ## 如果存在选项卡，切换，否则创建
            if ($('[lay-id="' + lay_id + '"]', top.document).length <= 0) {
                var tab_content = '<iframe id="' + lay_id + '" name="' + options.id + '" src="' + options.url + '" frameborder="0" class="custom-iframe"></iframe>';
                element.tabAdd('mainTabs', {
                    title: options.title,
                    content: tab_content,
                    id: lay_id
                });
            }
        }
    ## 创建完后切换
        element.tabChange('mainTabs', lay_id);
    }

    function layerOpen(options) {
        if (options.type == 2) {
            options.content = appendNodeId(options.content);
        }
        layer.open(options);
    }

    ## 获取自适应的socket
    function getSocketHost() {
        var pro = location.protocol === 'https:' ? 'wss://' : 'ws://';
        return pro + window.location.host + "$!jpomProxyPath";
    }

    function getTopQueryString(name) {
        return getQueryStringByUrl(top.location.search.substr(1), name);
    }

    function getQueryString(name) {
        return getQueryStringByUrl(location.search.substr(1), name);
    }

    function getQueryStringByUrl(url, name) {
        var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)");
        var r = url.match(reg);
        if (r != null) return unescape(r[2]);
        return null;
    }

    function urlUpdateParams(url, name, value) {
        var r = url;
        if (r != null && r != 'undefined' && r != "") {
            value = encodeURIComponent(value);
            var reg = new RegExp("(^|)" + name + "=([^&]*)(|$)");
            var tmp = name + "=" + value;
            if (url.match(reg) != null) {
                r = url.replace(eval(reg), tmp);
            } else {
                if (url.match("[\?]")) {
                    r = url + "&" + tmp;
                } else {
                    r = url + "?" + tmp;
                }
            }
        }
        return r;
    }

    ## 带loading 效果的网络请求
    function loadingAjax(data, closeLoading) {
        var success = data.success;
        delete data.success;
        var error = data.error;
        delete data.error;

        var newData = {
            nodeId: getTopQueryString("nodeId")
        };
        $.extend(newData, data.data);
        delete data.data;

        var index;
        var defData = {
            type: 'POST',
            dataType: 'json',
            data: newData,
            beforeSend: function () {
                if (closeLoading !== true) {
                    index = layer.load(1, {
                        shade: [0.3, '#fff']
                    });
                }
            },
            success: function (data) {
                layer.close(index);
                if (data.code == 800) {
                ## 用户信息失效
                    layer.msg(data.msg);
                    setTimeout(function () {
                        top.location.reload();
                    }, 1500);
                    return;
                }
                success && success(data);
            },
            error: function () {
                layer.close(index);
                layer.msg("网络异常,请稍后再试");
            }
        };
        $.extend(defData, data);
        $.ajax(defData);
    }

    ## 静默ajax
    function silentAjax(data) {
        loadingAjax(data, true);
    }

    ## 默认表格渲染
    function tableRender(data) {
        var done = data.done;
        delete data.done;

        var newWhere = {
            nodeId: getTopQueryString("nodeId")
        };
        $.extend(newWhere, data.where);
        delete data.where;
        //
        const defData = {
            even: true,
            loading: true,
            method: 'POST',
            response: {
                statusCode: 200
            },
            where: newWhere,
            done: function (data) {
                if (data.code == 800) {
                ## 用户信息失效
                    layer.msg(data.msg);
                    setTimeout(function () {
                        top.location.reload();
                    }, 1500);
                    return;
                }
                done && done(data);
            }
        };
        $.extend(defData, data);
        table.render(defData);
    }


    ## 文件上传渲染
    function uploadRender(data, fn) {
        layui.use(['upload'], function () {
            var upload = layui.upload;
            var newsData = {
                nodeId: getTopQueryString("nodeId")
            };
            $.extend(newsData, data.data);
            delete data.data;
            const defData = {
                data: newsData
            };
            $.extend(defData, data);
            var uploadResult = upload.render(defData);
            fn && fn(uploadResult);
        });
    }

    ## 格式化时间
    function formateTime(time) {
        if (!time) {
            return 0;
        }
        var date = new Date();
        date.setTime(time);
        var y = date.getFullYear();
        var m = date.getMonth() + 1;
        m = m < 10 ? ('0' + m) : m;
        var d = date.getDate();
        d = d < 10 ? ('0' + d) : d;
        var h = date.getHours();
        h = h < 10 ? ('0' + h) : h;
        var minute = date.getMinutes();
        var second = date.getSeconds();
        minute = minute < 10 ? ('0' + minute) : minute;
        second = second < 10 ? ('0' + second) : second;
        return y + '-' + m + '-' + d + ' ' + h + ':' + minute + ':' + second;
    }

    ## 异步加载js
    function asyncLoadJs(url, callback) {
        var script = document.createElement('script');
        script.type = "text/javascript";
        if (script.readyState) {
            script.onreadystatechange = function () {
                if (script.readyState == "loaded" || script.readyState == "complete") {
                    script.onreadystatechange = null;
                    callback && callback();
                }
            }
        } else {
            script.onload = function () {
                callback && callback();
            }
        }
        script.src = url;
        document.body.appendChild(script);
    }

</script>

<script id="jsCommonContext" type="text/html">$!jsCommonContext</script>